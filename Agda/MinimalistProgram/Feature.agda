-- Minimalist Program in syntax (Chomsky etc.)

module _ where

open import Data.Bool using (true; false; Bool; _‚àß_)
open import Data.Empty
open import Data.Fin
open import Data.List as ùïÉ hiding ([_] ; merge; _‚à∑ ≥_)
open import Data.Maybe using (Maybe; just; nothing) 
open import Data.Nat
open import Data.Product 
open import Data.String hiding (_++_; _==_) 
open import Data.Unit
open import Relation.Binary.PropositionalEquality

open import Agda.Builtin.Reflection
open import Reflection

open import Prelude public
open import ReflectionFunctions public


-- for simplicity PHON and SEM are Strings
PHON = String
SEM = String


-- SYN features

module features-adger where

  -- Features. Cf. D.Adger "Core Syntax", p.41.
  
  data SYNType : Set where
    cCategory : SYNType
    cPerson cNumber cGender : SYNType   -- œÜ -features
    cCase : SYNType
    cTense : SYNType
    cWh : SYNType
    -- cC : SYNType
    -- Participle : SYNType
    -- Infinitive : SYNType
    -- Other : SYNType
    -- Œò-Role : SYNType
    -- Wh COMP AGR : SYNType  -- INFL = AGR + tense
    
  data SYNVal : SYNType ‚Üí Set where
    -- N V A P v : SYNVal Category
    cfirst csecond cthird : SYNVal cPerson
    csingular cplural cdual : SYNVal cNumber
    cfem cmasc cneut : SYNVal cGender
    cNOM cACC cGEN : SYNVal cCase
    cpast cpresent cfuture : SYNVal cTense
    cQuestion cDecl : SYNVal cWh
    -- +part -part : SYNVal Participle
    -- +inf -inf : SYNVal Infinitive
    -- part inf : SYNVal Other
    -- Agent Theme Goal : SYNVal Œò-Role
    -- +wh -wh : SYNVal Wh
    none : {A : SYNType} ‚Üí SYNVal A
    yes  : {A : SYNType} ‚Üí SYNVal A
    no   : {A : SYNType} ‚Üí SYNVal A
  
  data SYNCore : Set where
    cD cN cV cA cP cv cC : SYNCore
    _‚¶Ç_ : (A : SYNType) ‚Üí SYNVal A ‚Üí SYNCore


module features-ms where

  -- –ú–∏—Ç—Ä–µ–Ω–∏–Ω–∞, –°–ª—é—Å–∞—Ä—å, –†–æ–º–∞–Ω–æ–≤–∞ —Å.129.

  data SYNType : Set where
    -- cCategory : SYNType
    cPerson cNumber cGender : SYNType   -- œÜ -features
    cCase : SYNType
    cTense : SYNType
    
  data SYNVal : SYNType ‚Üí Set where
    -- N V A P v : SYNVal Category
    c1 c2 c3 : SYNVal cPerson
    csing cplural cdual : SYNVal cNumber
    cfem cmasc cneut : SYNVal cGender
    cNOM cACC cGEN : SYNVal cCase
    cpast cpres cfut : SYNVal cTense
    -- +part -part : SYNVal Participle
    -- +inf -inf : SYNVal Infinitive
    -- part inf : SYNVal Other
    -- Agent Theme Goal : SYNVal Œò-Role
    -- +wh -wh : SYNVal Wh 
    -- none : {A : SYNType} ‚Üí SYNVal A
  
  data SYNCore : Set where
    cD cN cV cA cP cv : SYNCore
    _‚¶Ç_ : (A : SYNType) ‚Üí SYNVal A ‚Üí SYNCore

-- open features-ms
open features-adger


private

  deftyp : Name ‚Üí TC ‚ä§
  deftyp fname = do
       Œ¥ ‚Üê getDefinition (quote SYNType)
       let constrs = constructors Œ¥
       let clauses = map2 mk-cls constrs constrs
       defineFun fname clauses

  _==·µó_ : SYNType ‚Üí SYNType ‚Üí Bool
  unquoteDef _==·µó_ = deftyp _==·µó_ 

  defval : Name ‚Üí TC ‚ä§
  defval fname = do
       Œ¥ ‚Üê getDefinition (quote SYNVal)
       let constrs = constructors Œ¥
       let clauses = map2 mk-cls constrs constrs
       defineFun fname clauses

  _==·µõ_ : {A B : SYNType} ‚Üí SYNVal A ‚Üí SYNVal B ‚Üí Bool
  unquoteDef _==·µõ_ = defval _==·µõ_ 


instance
  EqVal : {A B : SYNType} ‚Üí Eq (SYNVal A) (SYNVal B)
  _==_ {{EqVal}} = _==·µõ_

  EqTyp : Eq (SYNType) (SYNType)
  _==_ {{EqTyp}} = _==·µó_

private

  mk-cls2 : Name ‚Üí Name ‚Üí Maybe Clause
  mk-cls2 (quote _‚¶Ç_) q2 = nothing
  mk-cls2 q1 (quote _‚¶Ç_) = nothing
  mk-cls2 q1 q2 with primQNameEquality q1 q2
  ... | true  = just (clause [] (vra (con q1 []) ‚à∑ vra (con q2 []) ‚à∑ [])
                             (con (quote true)  []))
  ... | false = just (clause [] (vra (con q1 []) ‚à∑ vra (con q2 []) ‚à∑ [])
                             (con (quote false) []))
  
  ddef3 : Name ‚Üí TC ‚ä§
  ddef3 fname = do
       Œ¥ ‚Üê getDefinition (quote SYNCore)
       let constrs-Œ¥ = constructors Œ¥
       let clauses1 = map2Maybe mk-cls2 constrs-Œ¥ constrs-Œ¥   -- skip _‚¶Ç_
       let clause2  = clause (("x1" , (vra (def (quote SYNType) []))) ‚à∑ 
                              ("x2" , (vra (def (quote SYNType) []))) ‚à∑ 
                              ("y1" , (vra (def (quote SYNVal) (vra (var 1 []) ‚à∑ [])))) ‚à∑ 
                              ("y2" , (vra (def (quote SYNVal) (vra (var 1 []) ‚à∑ [])))) ‚à∑ [])
                             (vra (con (quote _‚¶Ç_) (vra (var 2) ‚à∑ vra (var 0) ‚à∑ [])) ‚à∑ 
                              vra (con (quote _‚¶Ç_) (vra (var 3) ‚à∑ vra (var 1) ‚à∑ [])) ‚à∑ [])
                             (def (quote _‚àß_) (vra (def (quote _==_) (vra (var 3 []) ‚à∑
                                                                     (vra (var 2 []) ‚à∑ []))) ‚à∑
                                               vra (def (quote _==_) (vra (var 1 []) ‚à∑
                                                                     (vra (var 0 []) ‚à∑ []))) ‚à∑
                                               [])) ‚à∑ []
       let clause3  = clause (("x" , (vra (def (quote SYNCore) []))) ‚à∑         -- "false" clause
                              ("y" , (vra (def (quote SYNCore) []))) ‚à∑ [])
                             ((vra (var 1)) ‚à∑ vra (var 0) ‚à∑ [])
                             (con (quote false) []) ‚à∑ []
       let clauses = clauses1 ++ clause2 ++ clause3
       defineFun fname clauses

  _==·∂†_ : SYNCore ‚Üí SYNCore ‚Üí Bool
  unquoteDef _==·∂†_ = ddef3 _==·∂†_
  

instance
  EqSYNCore : Eq SYNCore SYNCore
  _==_ {{EqSYNCore}} = _==·∂†_


private

  module test1 where
  
    _ : (_ ‚¶Ç cpast) == (cTense ‚¶Ç cpast) ‚â° true
    _ = refl
    
    _ : (_ ‚¶Ç (cpast)) == (cTense ‚¶Ç cpresent) ‚â° false
    _ = refl
    
    _ : (cTense ‚¶Ç none) == (cTense ‚¶Ç none) ‚â° true
    _ = refl
    
    _ : (cTense ‚¶Ç cpast) == (cTense ‚¶Ç none) ‚â° false
    _ = refl
    
    _ : cN ==·∂† cA ‚â° false
    _ = refl
    
    _ : cV ==·∂† cV ‚â° true
    _ = refl
    
    _ : cV == (_ ‚¶Ç cpast) ‚â° false
    _ = refl
    
    _ : cA == (cTense ‚¶Ç none) ‚â° false
    _ = refl



-- Second order properties of features?

data Strength : Set where
  strong weak : Strength    -- EPP?

instance
  EqStrength : Eq Strength Strength
  _==_ {{EqStrength}} strong strong = true
  _==_ {{EqStrength}} weak weak = true
  _==_ {{EqStrength}} _ _ = false


data Opt : Set where
  mandatory optional : Opt

instance
  EqOpt : Eq Opt Opt
  _==_ {{EqOpt}} mandatory mandatory = true
  _==_ {{EqOpt}} optional optional = true
  _==_ {{EqOpt}} _ _ = false

data SYN : Set where
  fea : Opt ‚Üí Strength ‚Üí SYNCore ‚Üí SYN

instance
  EqSYN : Eq SYN SYN
  _==_ {{EqSYN}} (fea o1 s1 c1) (fea o2 s2 c2) = o1 == o2 ‚àß s1 == s2 ‚àß c1 == c2

pattern T·∂†        = fea mandatory weak (cTense ‚¶Ç none)
pattern past      = fea mandatory weak (cTense ‚¶Ç cpast)
pattern past*     = fea mandatory strong (cTense ‚¶Ç cpast)
pattern present   = fea mandatory weak (cTense ‚¶Ç cpresent)
pattern present*  = fea mandatory strong (cTense ‚¶Ç cpresent)
pattern future    = fea mandatory weak (cTense ‚¶Ç cfuture)
pattern future*   = fea mandatory strong (cTense ‚¶Ç cfuture)
pattern C·∂†        = fea mandatory weak cC
pattern V         = fea mandatory weak cV
pattern V*        = fea mandatory strong cV
pattern v·∂†        = fea mandatory weak cv
pattern v·∂†*       = fea mandatory strong cv
pattern N         = fea mandatory weak cN
pattern N*        = fea mandatory strong cN
pattern D         = fea mandatory weak cD
pattern D*        = fea mandatory strong cD
-- pattern n  = fea mandatory weak in
-- pattern n* = fea mandatory strong in
pattern P         = fea mandatory weak cP
pattern P*        = fea mandatory strong cP
pattern ‚ü®P‚ü©       = fea optional weak cP
pattern ‚ü®P*‚ü©      = fea optional strong cP
pattern A       = fea mandatory weak cA
pattern A*      = fea mandatory strong cA
pattern singular  = fea mandatory weak (cNumber ‚¶Ç csingular)
pattern singular* = fea mandatory strong (cNumber ‚¶Ç csingular)
pattern plural    = fea mandatory weak (cNumber ‚¶Ç   cplural)
pattern plural*   = fea mandatory strong (cNumber ‚¶Ç cplural)
pattern Number:   = fea mandatory weak (cNumber ‚¶Ç none)
pattern masc      = fea mandatory weak (cGender ‚¶Ç cmasc)
pattern fem       = fea mandatory weak (cGender ‚¶Ç cfem)
pattern first     = fea mandatory weak (cPerson ‚¶Ç cfirst)
pattern second    = fea mandatory weak (cPerson ‚¶Ç csecond)
pattern third     = fea mandatory weak (cPerson ‚¶Ç cthird)
pattern Case:     = fea mandatory weak (cCase ‚¶Ç none)
pattern NOM       = fea mandatory weak (cCase ‚¶Ç cNOM)
pattern ACC       = fea mandatory weak (cCase ‚¶Ç cACC)
pattern GEN       = fea mandatory weak (cCase ‚¶Ç cGEN)
pattern Wh:*      = fea mandatory strong (cWh ‚¶Ç none)
pattern question  = fea mandatory weak (cWh ‚¶Ç cQuestion)
pattern decl      = fea mandatory weak (cWh ‚¶Ç cDecl)
pattern _noval x  = fea mandatory weak (x ‚¶Ç none)


-- Match - SYNType equality
_==t_ : SYNCore ‚Üí SYNCore ‚Üí Bool
(X ‚¶Ç _) ==t (Y ‚¶Ç _) = X == Y
x ==t y = false


-- Feature lists ------------------

PHONList = List PHON
SEMList  = List SEM
SYNList  = List SYN


-- without permutations
private
  _==À°_ : {A : Set} ‚Üí {{Eq A A}} ‚Üí (List A) ‚Üí (List A) ‚Üí Bool
  [] ==À° [] = true
  (x ‚à∑ xs) ==À° (y ‚à∑ ys) = x == y ‚àß xs ==À° ys
  _ ==À° _ = false

  _‚ààÀ°_ : {A : Set} ‚Üí {{Eq A A}} ‚Üí (List A) ‚Üí List (List A) ‚Üí Bool
  x ‚ààÀ° [] = false
  x ‚ààÀ° (v ‚à∑ vs) with x ==À° v
  ... | true  = true
  ... | false = x ‚ààÀ° vs


-- with permutations

private

  module test2 where

    _ : ListPermutations (N ‚à∑ []) ‚â° (N ‚à∑ []) ‚à∑ []
    _ = refl
    
    _ : ListPermutations (past* ‚à∑ V ‚à∑ A ‚à∑ []) ‚â° (A ‚à∑ V ‚à∑ past* ‚à∑ []) ‚à∑
                                                 (A ‚à∑ past* ‚à∑ V ‚à∑ []) ‚à∑
                                                 (past* ‚à∑ A ‚à∑ V ‚à∑ []) ‚à∑
                                                 (V ‚à∑ A ‚à∑ past* ‚à∑ []) ‚à∑
                                                 (V ‚à∑ past* ‚à∑ A ‚à∑ []) ‚à∑
                                                 (past* ‚à∑ V ‚à∑ A ‚à∑ []) ‚à∑ []
    _ = refl                                              


instance
  EqList : {A : Set} ‚Üí {{Eq A A}} ‚Üí Eq (List A) (List A)
  _==_ {{EqList}} x y = x ‚ààÀ° (ListPermutations y)  

  -- EqSYNList : Eq SYNList SYNList
  -- _==_ {{EqSYNList}} x y = x ‚ààÀ° (SYNListPermutations y)  
  -- -- _==_ {{EqSYNList}} = Œª x y ‚Üí any (Œª v ‚Üí x ==À° v) (SYNListPermutations y)  

  -- EqPHON : Eq PHON PHON
  -- _==_ {{EqPHON}} (phon x1) (phon x2) = x1 == x2
  EqPHON = EqString
  
  EqLPHON : Eq (List PHON) (List PHON)
  EqLPHON = EqList {PHON}

  -- EqSEM : Eq SEM SEM
  -- _==_ {{EqSEM}} (sem x1) (sem x2) = x1 == x2
  EqSEM = EqString

  EqLSEM : Eq (List SEM) (List SEM)
  EqLSEM = EqList {SEM}

private

  module test3 where
  
    _ : (V ‚à∑ past* ‚à∑ []) == (V ‚à∑ past* ‚à∑ []) ‚â° true
    _ = refl
    
    _ : (past* ‚à∑ V ‚à∑ []) == (V ‚à∑ past* ‚à∑ []) ‚â° true
    _ = refl
    
    _ : (past* ‚à∑ V ‚à∑ A ‚à∑ []) == (V ‚à∑ A ‚à∑ past* ‚à∑ []) ‚â° true
    _ = refl
    
    _ : (past* ‚à∑ A ‚à∑ V ‚à∑ N ‚à∑ []) == (N ‚à∑ A ‚à∑ V ‚à∑ past* ‚à∑ []) ‚â° true
    _ = refl
    
    _ : (A ‚à∑ V ‚à∑ N ‚à∑ []) == (N ‚à∑ A ‚à∑ V ‚à∑ past* ‚à∑ []) ‚â° false
    _ = refl
    
    _ : (V ‚à∑ N ‚à∑ N ‚à∑ []) == (N ‚à∑ V ‚à∑ N ‚à∑ []) ‚â° true
    _ = refl



-- -- Hierarchy of projections  
-- -- This is actually a feature list (or partial order?)
-- data HoP : Set where
--   ‚àÖ   : HoP
--   _‚ü©_ : {A : SYNType} ‚Üí (x : SYNVal A) ‚Üí HoP ‚Üí HoP

-- infixr 5 _‚ü©_ 

-- vHoP : HoP
-- vHoP = v ‚ü© V ‚ü© ‚àÖ


-- HoP' = SYNList

-- vHoP' : HoP'
-- vHoP' = v ‚à∑ V ‚à∑ []

-- _‚à£ : {A : SYNType} ‚Üí SYNVal A ‚Üí HoP'
-- _‚à£ x = x ‚à∑ []

-- _‚ü©'_ : {A : SYNType} ‚Üí SYNVal A ‚Üí HoP' ‚Üí HoP'
-- x ‚ü©' y = x ‚à∑ y

-- infixr 3 _‚ü©'_
-- infix  5 _‚à£

-- vHoP'' : HoP'
-- vHoP'' = v ‚ü©' V ‚à£

-- sHoP = T ‚ü© v ‚ü© V ‚ü© ‚àÖ
