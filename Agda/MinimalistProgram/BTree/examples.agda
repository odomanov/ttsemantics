module BTree.examples where

open import Data.Bool using (Bool; true; false)
-- open import Data.Fin hiding (_-_)
open import Data.Maybe
open import Data.Nat hiding (_>_)
open import Data.List as ùïÉ hiding ([_]; foldr; foldl)
open import Relation.Binary.PropositionalEquality hiding ([_])

open import BTree.SyntaxObject

module ex9 where

  -- That I care proves everything  -- cf. Adger, p.246

  -- first, "that I care"

  thatÀ°‚Å± = mkLI ("that" ‚à∑ []) [] (C·∂† ‚à∑ []) (T·∂† ‚à∑ [])
  IÀ°‚Å±    = mkLI ("I" ‚à∑ [])    [] (N ‚à∑ [])  []
  careÀ°‚Å± = mkLI ("care" ‚à∑ []) [] (V ‚à∑ [])  []
  vÀ°‚Å±    = mkLI ("v" ‚à∑ [])    [] (v·∂† ‚à∑ []) (V ‚à∑ N ‚à∑ [])
  TÀ°‚Å±    = mkLI ("T" ‚à∑ [])    [] (T·∂† ‚à∑ []) (v·∂† ‚à∑ N ‚à∑ [])
  CÀ°‚Å±    = mkLI ("C" ‚à∑ [])    [] (C·∂† ‚à∑ []) (T·∂† ‚à∑ [])

  thatÀ°·µÉ IÀ°·µÉ careÀ°·µÉ vÀ°·µÉ TÀ°·µÉ : LexArr

  thatÀ°·µÉ = [ thatÀ°‚Å± ]
  IÀ°·µÉ    = IÀ°‚Å± ‚à∑ thatÀ°·µÉ
  careÀ°·µÉ = careÀ°‚Å± ‚à∑ IÀ°·µÉ
  vÀ°·µÉ    = vÀ°‚Å± ‚à∑ careÀ°·µÉ
  TÀ°·µÉ    = TÀ°‚Å± ‚à∑ vÀ°·µÉ

  that = ‚ü¶ thatÀ°·µÉ ‚üß
  I    = ‚ü¶ IÀ°·µÉ ‚üß
  care = ‚ü¶ careÀ°·µÉ ‚üß
  v    = ‚ü¶ vÀ°·µÉ ‚üß
  T    = ‚ü¶ TÀ°·µÉ ‚üß

  dtc = Merge (Select thatÀ°·µÉ)
              (Merge (Select IÀ°·µÉ)
                     (Merge (Select TÀ°·µÉ)
                            (Merge (Select IÀ°·µÉ)
                                   (Merge (Select vÀ°·µÉ)
                                          (Select careÀ°·µÉ)))))

  soc = DTree‚ÜíSO dtc

  _ : soc ‚â° ‚ü¶ ("that" ‚à∑ []) ‚àô [] ‚àô (C·∂† ‚à∑ []) ‚àô []
              - that
              - ‚ü¶ ("T" ‚à∑ []) ‚àô [] ‚àô (T·∂† ‚à∑ []) ‚àô []
                  - I
                  - ‚ü¶ ("T" ‚à∑ []) ‚àô [] ‚àô (T·∂† ‚à∑ []) ‚àô (N ‚à∑ [])
                      - T
                      - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô (v·∂† ‚à∑ []) ‚àô []
                          - I
                          - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô (v·∂† ‚à∑ []) ‚àô (N ‚à∑ [])
                              - v
                              - care ‚üß ‚üß ‚üß ‚üß ‚üß
  _ = refl                              
  

  -- now the full sentence

  proveÀ°‚Å±      = mkLI ("prove" ‚à∑ [])      [] (V ‚à∑ [])  (N ‚à∑ [])
  everythingÀ°‚Å± = mkLI ("everything" ‚à∑ []) [] (N ‚à∑ [])  []
  v2À°‚Å±         = mkLI ("v" ‚à∑ [])          [] (v·∂† ‚à∑ []) (V ‚à∑ C·∂† ‚à∑ [])
  T2À°‚Å±         = mkLI ("T" ‚à∑ [])          [] (T·∂† ‚à∑ []) (v·∂† ‚à∑ C·∂† ‚à∑ [])

  proveÀ°·µÉ everythingÀ°·µÉ v2À°·µÉ T2À°·µÉ C2À°·µÉ : LexArr

  proveÀ°·µÉ      = proveÀ°‚Å± ‚à∑ TÀ°·µÉ
  everythingÀ°·µÉ = everythingÀ°‚Å± ‚à∑ proveÀ°·µÉ
  v2À°·µÉ         = v2À°‚Å± ‚à∑ everythingÀ°·µÉ
  T2À°·µÉ         = T2À°‚Å± ‚à∑ v2À°·µÉ
  C2À°·µÉ         = CÀ°‚Å± ‚à∑ T2À°·µÉ

  prove      = ‚ü¶ proveÀ°·µÉ ‚üß
  everything = ‚ü¶ everythingÀ°·µÉ ‚üß
  v2         = ‚ü¶ v2À°·µÉ ‚üß
  T2         = ‚ü¶ T2À°·µÉ ‚üß
  C2         = ‚ü¶ C2À°·µÉ ‚üß

  dt = Merge (Select C2À°·µÉ)
             (Merge dtc
                    (Merge (Select T2À°·µÉ)
                           (Merge dtc
                                  (Merge (Select v2À°·µÉ)
                                         (Merge (Select proveÀ°·µÉ)
                                                (Select everythingÀ°·µÉ))))))

  so = DTree‚ÜíSO dt

  _ : so ‚â° ‚ü¶ ("C" ‚à∑ []) ‚àô [] ‚àô (C·∂† ‚à∑ []) ‚àô []
             - C2
             - ‚ü¶ ("T" ‚à∑ []) ‚àô [] ‚àô (T·∂† ‚à∑ []) ‚àô []
                 - soc
                 - ‚ü¶ ("T" ‚à∑ []) ‚àô [] ‚àô (T·∂† ‚à∑ []) ‚àô (C·∂† ‚à∑ [])
                     - T2
                     - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô (v·∂† ‚à∑ []) ‚àô []
                         - soc
                         - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô (v·∂† ‚à∑ []) ‚àô (C·∂† ‚à∑ [])
                             - v2
                             - ‚ü¶ ("prove" ‚à∑ []) ‚àô [] ‚àô (V ‚à∑ []) ‚àô []
                                 - prove
                                 - everything ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß
  _ = refl                                 

  dt0 = Merge (Select proveÀ°·µÉ) (Select everythingÀ°·µÉ)
  dt1 = Merge (Select v2À°·µÉ) dt0
  dt2 = Merge dtc dt1
  dt3 = Merge (Select T2À°·µÉ) dt2
  dt4 = Merge dtc dt3
  so0 = DTree‚ÜíSO dt0
  so1 = DTree‚ÜíSO dt1
  so2 = DTree‚ÜíSO dt2
  so3 = DTree‚ÜíSO dt3
  so4 = DTree‚ÜíSO dt4


  _ : chainL soc so ‚â° (so ‚à∑ so4 ‚à∑ soc ‚à∑ [])
                    ‚à∑ (so ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ soc ‚à∑ [])
                    ‚à∑ []
  _ = refl


--========================================================================

module ex8 where

  li1 li2 li3 : LexItem
  li1 = mkLI ("li1" ‚à∑ []) [] [] [] 
  li2 = mkLI ("li2" ‚à∑ []) [] [] [] 
  li3 = mkLI ("li3" ‚à∑ []) [] [] [] 


  l1 l2 l3 : LexArr
  l1 = [ li1 ]
  l2 = li2 ‚à∑ l1
  l3 = li3 ‚à∑ l2

  s1 = Select l1
  s2 = Select l2
  s3 = Select l3
  s0 = Merge s1 s2   -- ‚ü¶ s1 - s2 ‚üß

  so0 = DTree‚ÜíSO s0
  so1 = DTree‚ÜíSO s1
  so2 = DTree‚ÜíSO s2
  so3 = DTree‚ÜíSO s3
  
  p0-1 : so0 contains so1
  p0-1 = c0 cl 

  _ : Path‚ÜíList p0-1 ‚â° so0 ‚à∑ so1 ‚à∑ []
  _ = refl

  p0-2 : so0 contains so2
  p0-2 = c0 cr

  p1-1 : so1 contains so1
  p1-1 = c0
  
  p2-2 : so2 contains so2
  p2-2 = c0
  
  s3l = Merge s0 s3
  so3l = DTree‚ÜíSO s3l

  p3l-1 : so3l contains so1
  p3l-1 = c0 cl cl

  _ : Path‚ÜíList p3l-1 ‚â° so3l ‚à∑ so0 ‚à∑ so1 ‚à∑ []
  _ = refl

  s3r = Merge s3 s0  
  so3r = DTree‚ÜíSO s3r

  _ : s3r ‚â° Merge s3
                   (Merge s1
                           s2)
  _ = refl
  
  _ : so3r ‚â° ‚ü¶ LMerge (lbl so3) (LMerge (lbl so1) (lbl so2))
                      - so3
                      - ‚ü¶ LMerge (lbl so1) (lbl so2)
                            - so1
                            - so2 ‚üß ‚üß
  _ = refl
  
  p3r-1 : so3r contains so1
  p3r-1 = c0 cr cl

  _ : Path‚ÜíList p3r-1 ‚â° so3r ‚à∑ so0 ‚à∑ so1 ‚à∑ []
  _ = refl

  _ : s3r ‚â° Merge s3
                  (Merge s1 s2)
  _ = refl
  
  -- internal Merge
  s4 = Merge s1 s0
  so4 = DTree‚ÜíSO s4

  _ : so4 ‚â° ‚ü¶ "li2" ‚à∑ [] ‚àô [] ‚àô [] ‚àô []  --LMerge (lbl so1) (LMerge (lbl so1) (lbl so2))
              - so1
              - ‚ü¶ LMerge (lbl so1) (lbl so2)
                  - so1
                  - so2 ‚üß ‚üß
  _ = refl
  
  p4-0 : so4 contains so0
  p4-0 = c0 cr

  p4-1 : so4 contains so1
  p4-1 = c0 cl

  p4-0-1 : so4 contains so1
  p4-0-1 = c0 cr cl

  p4-0-2 : so4 contains so2
  p4-0-2 = c0 cr cr 

  _ : Path‚ÜíList p4-1 ‚â° so4 ‚à∑ so1 ‚à∑ []
  _ = refl

  _ : Path‚ÜíList p4-0-1 ‚â° so4 ‚à∑ so0 ‚à∑ so1 ‚à∑ []
  _ = refl

  _ : internalMerge? so3r ‚â° false
  _ = refl

  _ : internalMerge? so4 ‚â° true
  _ = refl
  


  _ : nodesNum so1 ‚â° 1
  _ = refl

  _ : nodesNum so0 ‚â° 3
  _ = refl

  _ : nodesNum so4 ‚â° 5
  _ = refl


  _ : edgesNum so1 ‚â° 0
  _ = refl

  _ : edgesNum so0 ‚â° 2
  _ = refl

  _ : edgesNum so4 ‚â° 4
  _ = refl



  -- constituents
  _ : Constituents so2 ‚â° so2 ‚à∑ []
  _ = refl

  _ : Constituents so0 ‚â° so0 ‚à∑ so1 ‚à∑ so2 ‚à∑ []
  _ = refl

  _ : Constituents so3r ‚â° so3r ‚à∑ so3 ‚à∑ so0 ‚à∑ so1 ‚à∑ so2 ‚à∑ []
  _ = refl



  -- positions

  _ : positions so1 ‚â° (pos c0) ‚à∑ []
  _ = refl

  _ : positions so0 ‚â° pos c0
                    ‚à∑ pos (c0 cl)
                    ‚à∑ pos (c0 cr) ‚à∑ []
  _ = refl

  _ : positions so4 ‚â° pos c0
                    ‚à∑ pos (c0 cl)
                    ‚à∑ pos (c0 cr)
                    ‚à∑ pos (c0 cr cl)
                    ‚à∑ pos (c0 cr cr) ‚à∑ []
  _ = refl

  
  _ : positionsSO so1 ‚â° (so1 ‚à∑ []) ‚à∑ []
  _ = refl

  _ : positionsSO so2 ‚â° (so2 ‚à∑ []) ‚à∑ []
  _ = refl

  _ : positionsSO so0 ‚â° (so0 ‚à∑ []) 
                     ‚à∑ (so0 ‚à∑ so1 ‚à∑ []) 
                     ‚à∑ (so0 ‚à∑ so2 ‚à∑ []) 
                     ‚à∑ []
  _ = refl          
                    
  _ : positionsSO so4 ‚â° (so4 ‚à∑ [])
                     ‚à∑ (so4 ‚à∑ so1 ‚à∑ [])
                     ‚à∑ (so4 ‚à∑ so0 ‚à∑ [])
                     ‚à∑ (so4 ‚à∑ so0 ‚à∑ so1 ‚à∑ [])
                     ‚à∑ (so4 ‚à∑ so0 ‚à∑ so2 ‚à∑ [])
                     ‚à∑ []
  _ = refl

  _ : positionsSO' so4 ‚â° positionsSO so4
  _ = refl


  _ : chainL so1 so1 ‚â° (so1 ‚à∑ []) ‚à∑ []
  _ = refl

  _ : chainL so1 so0 ‚â° (so0 ‚à∑ so1 ‚à∑ [])
                    ‚à∑ []
  _ = refl

  _ : chainL so1 so4 ‚â° (so4 ‚à∑ so1 ‚à∑ [])
                    ‚à∑ (so4 ‚à∑ so0 ‚à∑ so1 ‚à∑ [])
                    ‚à∑ []
  _ = refl

  _ : chainL so0 so4 ‚â° (so4 ‚à∑ so0 ‚à∑ [])
                    ‚à∑ []
  _ = refl

  _ : chainL so2 so4 ‚â° (so4 ‚à∑ so0 ‚à∑ so2 ‚à∑ [])
                    ‚à∑ []
  _ = refl



  pp0 : Position so1
  pp0 = pos c0

  pp1 : Position so0
  pp1 = pos p0-1

  pp2 : Position so0
  pp2 = pos p0-2

  _ : Pos‚ÜíList pp0 ‚â° so1 ‚à∑ []
  _ = refl

  _ : Pos‚ÜíList pp1 ‚â° so0 ‚à∑ so1 ‚à∑ []
  _ = refl

  _ : Pos‚ÜíList pp2 ‚â° so0 ‚à∑ so2 ‚à∑ []
  _ = refl


  pp41 : Position so4
  pp41 = pos p4-1

  _ : Pos‚ÜíList pp41 ‚â° so4 ‚à∑ so1 ‚à∑ []
  _ = refl

  _ : Pos‚ÜíSO pp41 ‚â° so1
  _ = refl

  pp42 : Position so4
  pp42 = pos {so4} p4-0-1      -- ???

  _ : Pos‚ÜíList pp42 ‚â° so4 ‚à∑ so0 ‚à∑ so1 ‚à∑ []
  _ = refl

  _ : Pos‚ÜíSO pp42 ‚â° so1
  _ = refl


  -- concatenation

  _ : p0-2 > p2-2 ‚â° p0-2
  _ = refl
  
  _ : p4-0 > p0-1 ‚â° p4-0-1
  _ = refl

  _ : p3l-1 > p1-1 ‚â° p3l-1
  _ = refl



  -- c-command

  _ : c-commanded pp0 ‚â° []
  _ = refl
  
  _ : c-commanded pp1 ‚â° pos (c0 cr) ‚à∑ []
  _ = refl

  _ : c-commanded pp41 ‚â° pos (c0 cr)
                       ‚à∑ pos (c0 cr cl)
                       ‚à∑ pos (c0 cr cr) ‚à∑ []
  _ = refl

  _ : ùïÉ.map Pos‚ÜíList (c-commanded pp41) ‚â° (so4 ‚à∑ so0 ‚à∑ [])
                                        ‚à∑ (so4 ‚à∑ so0 ‚à∑ so1 ‚à∑ [])
                                        ‚à∑ (so4 ‚à∑ so0 ‚à∑ so2 ‚à∑ [])
                                        ‚à∑ []
  _ = refl                                        


--========================================================================

-- module ex7 where

  -- John seeks a unicorn



--========================================================================

module ex6 where

  -- Which picture of himself Peter loves?

  pictureÀ°‚Å±    = mkLI ("picture" ‚à∑ []) [] (N ‚à∑ []) (P ‚à∑ [])
  PeterÀ°‚Å±      = mkLI ("Peter" ‚à∑ []) [] (N ‚à∑ []) []
  loveÀ°‚Å±       = mkLI ("love" ‚à∑ []) [] (V ‚à∑ []) (Wh:* ‚à∑ N ‚à∑ [])
  of-himselfÀ°‚Å± = mkLI ("of-himself" ‚à∑ []) [] (P ‚à∑ []) []
  whichÀ°‚Å±      = mkLI ("which" ‚à∑ []) [] (Wh:* ‚à∑ []) (N ‚à∑ [])

  pictureÀ°·µÉ of-himselfÀ°·µÉ PeterÀ°·µÉ loveÀ°·µÉ whichÀ°·µÉ : LexArr
  pictureÀ°·µÉ    = [ pictureÀ°‚Å± ] 
  of-himselfÀ°·µÉ = of-himselfÀ°‚Å± ‚à∑ pictureÀ°·µÉ
  PeterÀ°·µÉ      = PeterÀ°‚Å± ‚à∑ of-himselfÀ°·µÉ
  loveÀ°·µÉ       = loveÀ°‚Å± ‚à∑ PeterÀ°·µÉ
  whichÀ°·µÉ      = whichÀ°‚Å± ‚à∑ loveÀ°·µÉ

  picture    = ‚ü¶ pictureÀ°·µÉ ‚üß
  of-himself = ‚ü¶ of-himselfÀ°·µÉ ‚üß
  Peter      = ‚ü¶ PeterÀ°·µÉ ‚üß
  love       = ‚ü¶ loveÀ°·µÉ ‚üß
  which      = ‚ü¶ whichÀ°·µÉ ‚üß

  dtw = Merge (Select whichÀ°·µÉ)
              (Merge (Select of-himselfÀ°·µÉ)
                     (Select pictureÀ°·µÉ))
                     
  dt = Merge dtw
             (Merge (Select PeterÀ°·µÉ)
                    (Merge (Select loveÀ°·µÉ)
                           dtw))

  sow = DTree‚ÜíSO dtw
  so = DTree‚ÜíSO dt

  _ : so ‚â° ‚ü¶ ("love" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ [] ‚àô []  --("which" ‚à∑ []) ‚àô [] ‚àô Wh:* ‚à∑ [] ‚àô []  
             - ‚ü¶ ("which" ‚à∑ []) ‚àô [] ‚àô Wh:* ‚à∑ [] ‚àô []
                 - which
                 - ‚ü¶ ("picture" ‚à∑ []) ‚àô [] ‚àô N ‚à∑ [] ‚àô []
                     - of-himself
                     - picture ‚üß ‚üß 
             - ‚ü¶ ("love" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ [] ‚àô []
                 - Peter
                 - ‚ü¶ ("love" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ [] ‚àô N ‚à∑ []
                     - love
                     - ‚ü¶ ("which" ‚à∑ []) ‚àô [] ‚àô Wh:* ‚à∑ [] ‚àô []
                         - which
                         - ‚ü¶ ("picture" ‚à∑ []) ‚àô [] ‚àô N ‚à∑ [] ‚àô []
                             - of-himself
                             - picture ‚üß ‚üß ‚üß ‚üß ‚üß
  _ = refl                             


  _ : internalMerge? so ‚â° true
  _ = refl

  _ : internalMerge? sow ‚â° false
  _ = refl


  -- wrong tree

  so-wrong = DTree‚ÜíSO (Merge (Select PeterÀ°·µÉ) (Select pictureÀ°·µÉ))

  _ : so-wrong ‚â° ‚ü¶ nothing - Peter - picture ‚üß
  _ = refl             

  dt0 = Merge (Select of-himselfÀ°·µÉ) (Select pictureÀ°·µÉ)
  dt1 = Merge (Select loveÀ°·µÉ) dtw
  dt2 = Merge (Select PeterÀ°·µÉ) dt1
  so0 = DTree‚ÜíSO dt0
  so1 = DTree‚ÜíSO dt1
  so2 = DTree‚ÜíSO dt2

  _ : positions so ‚â° pos c0 
                   ‚à∑ pos (c0 cl) 
                   ‚à∑ pos (c0 cl cl) 
                   ‚à∑ pos (c0 cl cr) 
                   ‚à∑ pos (c0 cl cr cl) 
                   ‚à∑ pos (c0 cl cr cr) 
                   ‚à∑ pos (c0 cr) 
                   ‚à∑ pos (c0 cr cl) 
                   ‚à∑ pos (c0 cr cr) 
                   ‚à∑ pos (c0 cr cr cl) 
                   ‚à∑ pos (c0 cr cr cr) 
                   ‚à∑ pos (c0 cr cr cr cl) 
                   ‚à∑ pos (c0 cr cr cr cr) 
                   ‚à∑ pos (c0 cr cr cr cr cl)
                   ‚à∑ pos (c0 cr cr cr cr cr)
                   ‚à∑ []
  _ = refl

  _ : positionsSO sow ‚â° (sow ‚à∑ [])
                     ‚à∑ (sow ‚à∑ which ‚à∑ [])
                     ‚à∑ (sow ‚à∑ so0 ‚à∑ [])
                     ‚à∑ (sow ‚à∑ so0 ‚à∑ of-himself ‚à∑ [])
                     ‚à∑ (sow ‚à∑ so0 ‚à∑ picture ‚à∑ [])
                     ‚à∑ []
  _ = refl

  _ : positionsSO so ‚â° (so ‚à∑ [])
                    ‚à∑ (so ‚à∑ sow ‚à∑ [])
                    ‚à∑ (so ‚à∑ sow ‚à∑ which ‚à∑ [])
                    ‚à∑ (so ‚à∑ sow ‚à∑ so0 ‚à∑ [])
                    ‚à∑ (so ‚à∑ sow ‚à∑ so0 ‚à∑ of-himself ‚à∑ [])
                    ‚à∑ (so ‚à∑ sow ‚à∑ so0 ‚à∑ picture ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ Peter ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ love ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ sow ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ sow ‚à∑ which ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ sow ‚à∑ so0 ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ sow ‚à∑ so0 ‚à∑ of-himself ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ sow ‚à∑ so0 ‚à∑ picture ‚à∑ [])
                    ‚à∑ []
  _ = refl

  _ : chainL sow so ‚â° (so ‚à∑ sow ‚à∑ [])
                    ‚à∑ (so ‚à∑ so2 ‚à∑ so1 ‚à∑ sow ‚à∑ [])
                    ‚à∑ []
  _ = refl                   


--========================================================================

module ex51 where
  
  -- vP: –ú–∞—à–∞ –µ–ª–∞ –∫–∞—à—É.   -- simplified a little
  
  –ú–∞—à–∞À°‚Å±      = mkLI ("–ú–∞—à–∞" ‚à∑ []) [] (N ‚à∑ fem ‚à∑ [])       []
  –µ–ª–∞À°‚Å±       = mkLI ("–µ–ª–∞" ‚à∑ [])  [] (V ‚à∑ past ‚à∑ [])      (N ‚à∑ [])
  –∫–∞—à—ÉÀ°‚Å±      = mkLI ("–∫–∞—à—É" ‚à∑ []) [] (N ‚à∑ fem ‚à∑ ACC ‚à∑ []) []
  vÀ°‚Å±         = mkLI ("v" ‚à∑ [])    [] (v·∂† ‚à∑ [])            (V ‚à∑ N ‚à∑ [])
  
  –µ–ª–∞À°·µÉ vÀ°·µÉ –ú–∞—à–∞À°·µÉ –∫–∞—à—ÉÀ°·µÉ : LexArr
  –µ–ª–∞À°·µÉ  = [ –µ–ª–∞À°‚Å± ]
  vÀ°·µÉ    = vÀ°‚Å± ‚à∑ –µ–ª–∞À°·µÉ
  –ú–∞—à–∞À°·µÉ = –ú–∞—à–∞À°‚Å± ‚à∑ vÀ°·µÉ
  –∫–∞—à—ÉÀ°·µÉ = –∫–∞—à—ÉÀ°‚Å± ‚à∑ –ú–∞—à–∞À°·µÉ
  
  –ú–∞—à–∞      = ‚ü¶ –ú–∞—à–∞À°·µÉ ‚üß
  –µ–ª–∞       = ‚ü¶ –µ–ª–∞À°·µÉ ‚üß
  –∫–∞—à—É      = ‚ü¶ –∫–∞—à—ÉÀ°·µÉ ‚üß
  v         = ‚ü¶ vÀ°·µÉ ‚üß

  dtv = Merge (Select vÀ°·µÉ)
              (Merge (Select –µ–ª–∞À°·µÉ)
                     (Select –∫–∞—à—ÉÀ°·µÉ))
                     
  dt = Merge (Select –ú–∞—à–∞À°·µÉ) dtv

  sov = DTree‚ÜíSO dtv
  so = DTree‚ÜíSO dt

  _ : sov ‚â° ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô N ‚à∑ [] 
              - v 
              - ‚ü¶ ("–µ–ª–∞" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ past ‚à∑ [] ‚àô []  
                  - –µ–ª–∞ 
                  - –∫–∞—à—É ‚üß ‚üß
  _ = refl                             

  _ : so ‚â° ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô []
             - –ú–∞—à–∞
             - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô N ‚à∑ [] 
                 - v 
                 - ‚ü¶ ("–µ–ª–∞" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ past ‚à∑ [] ‚àô []  
                     - –µ–ª–∞ 
                     - –∫–∞—à—É ‚üß ‚üß ‚üß
  _ = refl             


  _ : Constituents so ‚â° so
                      ‚à∑ –ú–∞—à–∞
                      ‚à∑ ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô N ‚à∑ [] 
                          - v 
                          - ‚ü¶ ("–µ–ª–∞" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ past ‚à∑ [] ‚àô []  
                              - –µ–ª–∞ 
                              - –∫–∞—à—É ‚üß ‚üß
                     ‚à∑ v
                     ‚à∑ ‚ü¶ ("–µ–ª–∞" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ past ‚à∑ [] ‚àô []  
                         - –µ–ª–∞ 
                         - –∫–∞—à—É ‚üß
                     ‚à∑ –µ–ª–∞
                     ‚à∑ –∫–∞—à—É
                     ‚à∑ []
  _ = refl                     



--========================================================================

module ex3 where

  
  -- –ß—Ç–æ –ú–∏—à–∞ –±—É–¥–µ—Ç –µ—Å—Ç—å?  –ú–°–†, 137.

  -- Lex Items
  —á—Ç–æÀ°‚Å±  = mkLI ("—á—Ç–æ" ‚à∑ [])  [] (N ‚à∑ [])           []
  –ú–∏—à–∞À°‚Å± = mkLI ("–ú–∏—à–∞" ‚à∑ []) [] (N ‚à∑ masc ‚à∑ [])    []
  –µ—Å—Ç—åÀ°‚Å± = mkLI ("–µ—Å—Ç—å" ‚à∑ []) [] (V ‚à∑ [])           (N ‚à∑ [])
  vÀ°‚Å±    = mkLI ("v" ‚à∑ [])    [] (v·∂† ‚à∑ [])          (V ‚à∑ N ‚à∑ [])
  TÀ°‚Å±    = mkLI ("T" ‚à∑ [])    [] (T·∂† ‚à∑ future ‚à∑ []) (v·∂† ‚à∑ N ‚à∑ [])
  CÀ°‚Å±    = mkLI ("C" ‚à∑ [])    [] (C·∂† ‚à∑ [])          (T·∂† ‚à∑ N ‚à∑ [])

  -- Lex Array
  —á—Ç–æÀ°·µÉ –µ—Å—Ç—åÀ°·µÉ –ú–∏—à–∞À°·µÉ vÀ°·µÉ TÀ°·µÉ CÀ°·µÉ : LexArr
  
  —á—Ç–æÀ°·µÉ  = [ —á—Ç–æÀ°‚Å± ] 
  –µ—Å—Ç—åÀ°·µÉ = –µ—Å—Ç—åÀ°‚Å± ‚à∑ —á—Ç–æÀ°·µÉ
  –ú–∏—à–∞À°·µÉ = –ú–∏—à–∞À°‚Å± ‚à∑ vÀ°·µÉ
  vÀ°·µÉ    = vÀ°‚Å± ‚à∑ –µ—Å—Ç—åÀ°·µÉ
  TÀ°·µÉ    = TÀ°‚Å± ‚à∑ –ú–∏—à–∞À°·µÉ
  CÀ°·µÉ    = CÀ°‚Å± ‚à∑ TÀ°·µÉ

  -- Syntax Objects
  —á—Ç–æ  = ‚ü¶ —á—Ç–æÀ°·µÉ ‚üß
  –µ—Å—Ç—å = ‚ü¶ –µ—Å—Ç—åÀ°·µÉ ‚üß
  –ú–∏—à–∞ = ‚ü¶ –ú–∏—à–∞À°·µÉ ‚üß
  v = ‚ü¶ vÀ°·µÉ ‚üß
  T = ‚ü¶ TÀ°·µÉ ‚üß
  C = ‚ü¶ CÀ°·µÉ ‚üß

  -- Syntax Tree
  dt = Merge (Select —á—Ç–æÀ°·µÉ)
             (Merge (Select CÀ°·µÉ)
                    (Merge (Select –ú–∏—à–∞À°·µÉ)
                           (Merge (Select TÀ°·µÉ)
                                  (Merge (Select –ú–∏—à–∞À°·µÉ)
                                         (Merge (Select vÀ°·µÉ)
                                                (Merge (Select –µ—Å—Ç—åÀ°·µÉ)
                                                       (Select —á—Ç–æÀ°·µÉ)))))))

  -- Syntax Object
  so = DTree‚ÜíSO dt

  _ : so ‚â° ‚ü¶ ("C" ‚à∑ []) ‚àô [] ‚àô C·∂† ‚à∑ [] ‚àô [] 
             - —á—Ç–æ 
             - ‚ü¶ ("C" ‚à∑ []) ‚àô [] ‚àô C·∂† ‚à∑ [] ‚àô N ‚à∑ []  
                 - C 
                 - ‚ü¶ ("T" ‚à∑ []) ‚àô [] ‚àô T·∂† ‚à∑ future ‚à∑ [] ‚àô [] 
                     - –ú–∏—à–∞ 
                     - ‚ü¶ ("T" ‚à∑ []) ‚àô [] ‚àô T·∂† ‚à∑ future ‚à∑ [] ‚àô N ‚à∑ [] 
                         - T 
                         - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô [] 
                             - –ú–∏—à–∞ 
                             - ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô N ‚à∑ [] 
                                 - v 
                                 - ‚ü¶ ("–µ—Å—Ç—å" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ [] ‚àô [] 
                                     - –µ—Å—Ç—å 
                                     - —á—Ç–æ        ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß
  _ = refl

  _ : positions so ‚â° pos c0 ‚à∑
                     pos (c0 cl) ‚à∑
                     pos (c0 cr) ‚à∑
                     pos (c0 cr cl) ‚à∑
                     pos (c0 cr cr) ‚à∑
                     pos (c0 cr cr cl) ‚à∑
                     pos (c0 cr cr cr) ‚à∑
                     pos (c0 cr cr cr cl) ‚à∑
                     pos (c0 cr cr cr cr) ‚à∑
                     pos (c0 cr cr cr cr cl) ‚à∑
                     pos (c0 cr cr cr cr cr) ‚à∑
                     pos (c0 cr cr cr cr cr cl) ‚à∑
                     pos (c0 cr cr cr cr cr cr) ‚à∑
                     pos (c0 cr cr cr cr cr cr cl) ‚à∑
                     pos (c0 cr cr cr cr cr cr cr) ‚à∑ []
  _ = refl

  _ : nodesNum so ‚â° 15
  _ = refl

  _ : edgesNum so ‚â° 14
  _ = refl
  
  dt0 = Merge (Select –µ—Å—Ç—åÀ°·µÉ) (Select —á—Ç–æÀ°·µÉ)
  dt1 = Merge (Select vÀ°·µÉ) dt0
  dt2 = Merge (Select –ú–∏—à–∞À°·µÉ) dt1
  dt3 = Merge (Select TÀ°·µÉ) dt2
  dt4 = Merge (Select –ú–∏—à–∞À°·µÉ) dt3
  dt5 = Merge (Select CÀ°·µÉ) dt4
  dt6 = Merge (Select —á—Ç–æÀ°·µÉ) dt5
  so0 = DTree‚ÜíSO dt0
  so1 = DTree‚ÜíSO dt1
  so2 = DTree‚ÜíSO dt2
  so3 = DTree‚ÜíSO dt3
  so4 = DTree‚ÜíSO dt4
  so5 = DTree‚ÜíSO dt5
  so6 = DTree‚ÜíSO dt6

  _ : so ‚â° so6
  _ = refl

  _ : positionsSO so ‚â° (so ‚à∑ []) ‚à∑
                      (so ‚à∑ —á—Ç–æ ‚à∑ []) ‚à∑
                      (so ‚à∑ so5 ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ C ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ –ú–∏—à–∞ ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ T ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ –ú–∏—à–∞ ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ v ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ so0 ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ so0 ‚à∑ –µ—Å—Ç—å ‚à∑ []) ‚à∑ 
                      (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ so0 ‚à∑ —á—Ç–æ ‚à∑ []) ‚à∑ []
  _ = refl                      

  _ : chainL –ú–∏—à–∞ so ‚â° (so ‚à∑ so5 ‚à∑ so4 ‚à∑ –ú–∏—à–∞ ‚à∑ []) ‚à∑
                       (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ –ú–∏—à–∞ ‚à∑ []) ‚à∑
                       []
  _ = refl

  p1 : path so to –ú–∏—à–∞
  p1 = c0 cr cr cl

  p2 : path so to –ú–∏—à–∞
  p2 = c0 cr cr cr cr cl

  _ : sister (pos p1) ‚â° just (pos (c0 cr cr cr))
  _ = refl

  _ : sisterL (pos p1) ‚â° just so3
  _ = refl

  _ : sisterL (pos p2) ‚â° just so1
  _ = refl


  _ : c-commanded (pos p2) ‚â° pos (c0 cr cr cr cr cr)
                           ‚à∑ pos (c0 cr cr cr cr cr cl)
                           ‚à∑ pos (c0 cr cr cr cr cr cr)
                           ‚à∑ pos (c0 cr cr cr cr cr cr cl)
                           ‚à∑ pos (c0 cr cr cr cr cr cr cr)
                           ‚à∑ []
  _ = refl

  _ : c-commandedL (pos p2) ‚â°  
          (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ [])
        ‚à∑ (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ v ‚à∑ [])
        ‚à∑ (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ so0 ‚à∑ [])
        ‚à∑ (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ so0 ‚à∑ –µ—Å—Ç—å ‚à∑ [])
        ‚à∑ (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ so1 ‚à∑ so0 ‚à∑ —á—Ç–æ ‚à∑ [])
        ‚à∑ []
  _ = refl

  _ : c-commandedL {so} (pos (c0 cr cr cr cr cr)) ‚â° (so ‚à∑ so5 ‚à∑ so4 ‚à∑ so3 ‚à∑ so2 ‚à∑ –ú–∏—à–∞ ‚à∑ []) ‚à∑ []
  _ = refl
         

  _ : internalMerge? so ‚â° true
  _ = refl

  _ : internalMerge? so4 ‚â° true
  _ = refl

  _ : internalMerge? so2 ‚â° false
  _ = refl


  _ : Constituents so1 ‚â° so1 ‚à∑ v ‚à∑ so0 ‚à∑ –µ—Å—Ç—å ‚à∑ —á—Ç–æ ‚à∑ []
  _ = refl

  _ : Constituents so1 ‚â° ‚ü¶ ("v" ‚à∑ []) ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô N ‚à∑ [] 
                           - v 
                           - ‚ü¶ ("–µ—Å—Ç—å" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ [] ‚àô [] 
                               - –µ—Å—Ç—å 
                               - —á—Ç–æ ‚üß ‚üß
                       ‚à∑ v
                       ‚à∑ ‚ü¶ ("–µ—Å—Ç—å" ‚à∑ []) ‚àô [] ‚àô V ‚à∑ [] ‚àô [] 
                           - –µ—Å—Ç—å 
                           - —á—Ç–æ ‚üß
                       ‚à∑ –µ—Å—Ç—å
                       ‚à∑ —á—Ç–æ
                       ‚à∑ []
  _ = refl







--========================================================================

module ex1 where

  run·µñ love·µñ give·µñ man·µñ to·µñ John·µñ Mary·µñ v·µñ : PHONList
  run·µñ  = "run" ‚à∑ []
  love·µñ = "love" ‚à∑ []
  give·µñ = "give" ‚à∑ []
  man·µñ  = "man" ‚à∑ []
  to·µñ   = "to" ‚à∑ []
  John·µñ = "John" ‚à∑ []
  Mary·µñ = "Mary" ‚à∑ []
  v·µñ    = "v" ‚à∑ []

  -- –≤ uF –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ -- –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç, –≤—Ç–æ—Ä–æ–µ -- —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  -- (–ø–µ—Ä–≤—ã–π Merge, –≤—Ç–æ—Ä–æ–π Merge)
  runÀ°‚Å±  = mkLI run·µñ  [] (V ‚à∑ []) (N ‚à∑ [])
  loveÀ°‚Å± = mkLI love·µñ [] (V ‚à∑ []) (N ‚à∑ N ‚à∑ [])
  giveÀ°‚Å± = mkLI give·µñ [] (V ‚à∑ []) (N ‚à∑ N ‚à∑ P ‚à∑ [])
  manÀ°‚Å±  = mkLI man·µñ  [] (N ‚à∑ []) []
  toÀ°‚Å±   = mkLI to·µñ   [] (P ‚à∑ []) (N ‚à∑ [])
  JohnÀ°‚Å± = mkLI John·µñ [] (N ‚à∑ []) []
  MaryÀ°‚Å± = mkLI Mary·µñ [] (N ‚à∑ []) []
  vÀ°‚Å±    = mkLI v·µñ    [] (v·∂† ‚à∑ []) (V ‚à∑ [])  -- ??

  vÀ°·µÉ : LexArr
  vÀ°·µÉ = [ vÀ°‚Å± ] 
  runÀ°·µÉ : LexArr
  runÀ°·µÉ = runÀ°‚Å± ‚à∑ vÀ°·µÉ
  JohnÀ°·µÉ : LexArr
  JohnÀ°·µÉ = JohnÀ°‚Å± ‚à∑ runÀ°·µÉ
  
  John = ‚ü¶ JohnÀ°·µÉ ‚üß
  run  = ‚ü¶ runÀ°·µÉ  ‚üß
  v    = ‚ü¶ vÀ°·µÉ    ‚üß
  
  s01 = Select runÀ°·µÉ
  s02 = Select JohnÀ°·µÉ
  s1  = Merge s01 s02
  s03 = Select vÀ°·µÉ 
  s2  = Merge s03 s1
  so1  = DTree‚ÜíSO s1
  so2  = DTree‚ÜíSO s2
  
  _ : so1 ‚â° ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô [] - run - John ‚üß
  _ = refl
  
  _ : so2 ‚â° ‚ü¶ v·µñ ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô [] 
              - v 
              - ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô [] 
                  - run 
                  - John ‚üß ‚üß  
  _ = refl
  

  p2 : so2 contains so2
  p2 = c0

  _ : Path‚ÜíList p2 ‚â° so2 ‚à∑ []
  _ = refl

  p01 : so2 contains run
  p01 = c0 cr cl

  _ : Path‚ÜíList p01 ‚â° so2 ‚à∑ so1 ‚à∑ run ‚à∑ []
  _ = refl


  fast·µñ : PHONList
  fast·µñ = "fast" ‚à∑ []
  fastÀ°‚Å± = mkLI fast·µñ [] (A ‚à∑ []) []
  fastÀ°·µÉ : LexArr
  fastÀ°·µÉ = fastÀ°‚Å± ‚à∑ runÀ°·µÉ
  fast = ‚ü¶ fastÀ°·µÉ ‚üß
  
  s04 = Select fastÀ°·µÉ
  s3  = Merge s04 s2
  so3  = DTree‚ÜíSO s3

  s4 = Merge (Select fastÀ°·µÉ)
             (Merge (Select vÀ°·µÉ)
                    (Merge (Select runÀ°·µÉ)
                           (Select JohnÀ°·µÉ)))
  so4 = DTree‚ÜíSO s4                               

  _ : s3 ‚â° s4
  _ = refl

  _ : so4 ‚â° ‚ü¶ v·µñ ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô [] 
              - fast 
              - ‚ü¶ v·µñ ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô [] 
                  - v 
                  - ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô [] 
                      - run 
                      - John ‚üß ‚üß ‚üß
  _ = refl
  
  
  MaryÀ°·µÉ : LexArr
  MaryÀ°·µÉ = MaryÀ°‚Å± ‚à∑ runÀ°·µÉ
  Mary = ‚ü¶ MaryÀ°·µÉ ‚üß

  run‚ÇÇÀ°·µÉ : LexArr
  run‚ÇÇÀ°·µÉ = runÀ°‚Å± ‚à∑ MaryÀ°·µÉ
  run‚ÇÇ = ‚ü¶ run‚ÇÇÀ°·µÉ ‚üß

  s05 = Select MaryÀ°·µÉ
  
  -- Mary runs
  s5 = Merge s05 (Select run‚ÇÇÀ°·µÉ)
  so5 = DTree‚ÜíSO s5
  
  _ : so5 ‚â° ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô []  
              - Mary 
              - run‚ÇÇ ‚üß
  _ = refl
  
  
  loveÀ°·µÉ : LexArr
  loveÀ°·µÉ = loveÀ°‚Å± ‚à∑ run‚ÇÇÀ°·µÉ
  love = ‚ü¶ loveÀ°·µÉ ‚üß
  
  -- John loves Mary
  s6 = Merge (Select JohnÀ°·µÉ)
             (Merge (Select loveÀ°·µÉ)
                    (Select MaryÀ°·µÉ))
  so6 = DTree‚ÜíSO s6                      
  
  _ : so6 ‚â° ‚ü¶ love·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô [] 
              - John 
              - ‚ü¶ love·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô N ‚à∑ [] 
                  - love 
                  - Mary ‚üß ‚üß
  _ = refl


  s7 = Merge s6 s05
  s8 = Merge (Select loveÀ°·µÉ) s05
  so7 = DTree‚ÜíSO s7
  so8 = DTree‚ÜíSO s8



--   --==  Constituents  ==--
  
  _ : Constituents so1 ‚â° ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô [] - run - John ‚üß ‚à∑
                           run ‚à∑
                           John ‚à∑
                           []
  _ = refl                             
  
  _ : Constituents so2 ‚â° ‚ü¶ v·µñ ‚àô [] ‚àô v·∂† ‚à∑ [] ‚àô []
                             - v
                             - ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô []
                                 - run
                                 - John ‚üß ‚üß ‚à∑  
                           v ‚à∑
                           ‚ü¶ run·µñ ‚àô [] ‚àô V ‚à∑ [] ‚àô []
                             - run
                             - John ‚üß ‚à∑
                           run ‚à∑
                           John ‚à∑
                           []
  _ = refl
  

  _ : so1 contains John 
  _ = c0 cr

  _ : so2 contains so1
  _ = c0 cr

  p7-6 : Position so7
  p7-6 = pos (c0 cl) 

  p7-John : Position so7
  p7-John = pos (c0 cl cl)
  
  p7-love : Position so7
  p7-love = pos (c0 cl cr cl)

  p7-Mary1 : Position so7
  p7-Mary1 = pos (c0 cr)

  p7-Mary2 : Position so7
  p7-Mary2 = pos (c0 cl cr cr)


  --==   Internal Merge  ==--

  _ : internalMerge? so1 ‚â° false
  _ = refl

  _ : internalMerge? so2 ‚â° false
  _ = refl

  _ : internalMerge? so3 ‚â° false   -- Adjoin
  _ = refl

  _ : internalMerge? so5 ‚â° false
  _ = refl

  _ : Constituents so6 ‚â° so6 ‚à∑ John ‚à∑ so8 ‚à∑ ‚ü¶ loveÀ°·µÉ ‚üß ‚à∑ Mary ‚à∑ []   
  _ = refl

  _ : Constituents so8 ‚â° so8 ‚à∑ ‚ü¶ loveÀ°·µÉ ‚üß ‚à∑ Mary ‚à∑ []   
  _ = refl

  _ : so6 contains·µá John ‚â° true
  _ = refl
  
  _ : internalMerge? so6 ‚â° false
  _ = refl

  _ : Constituents so7 ‚â° so7 ‚à∑ so6 ‚à∑ Mary ‚à∑ John ‚à∑ so8 ‚à∑ ‚ü¶ loveÀ°·µÉ ‚üß ‚à∑ Mary ‚à∑ []   
  _ = refl

  _ : internalMerge? so7 ‚â° true
  _ = refl



  -- c-command

  _ : c-commanded p7-6 ‚â° pos (c0 cr) ‚à∑ []
  _ = refl

  _ : c-commanded p7-John ‚â° pos (c0 cl cr)
                          ‚à∑ pos (c0 cl cr cl)
                          ‚à∑ pos (c0 cl cr cr)
                          ‚à∑ []
  _ = refl

  _ : c-commanded p7-Mary1 ‚â° pos (c0 cl) 
                           ‚à∑ pos (c0 cl cl) 
                           ‚à∑ pos (c0 cl cr)
                           ‚à∑ pos (c0 cl cr cl)
                           ‚à∑ pos (c0 cl cr cr)
                           ‚à∑ [] 
  _ = refl

  _ : c-commanded p7-Mary2 ‚â° pos (c0 cl cr cl) ‚à∑ []
  _ = refl

  _ : c-commanded p7-love ‚â° pos (c0 cl cr cr) ‚à∑ []
  _ = refl

