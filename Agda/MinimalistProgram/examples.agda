module _ where

open import Data.Bool using (Bool; true; false)
open import Data.Fin
open import Data.Maybe
open import Data.Nat
open import Data.List hiding ([_])
open import Relation.Binary.PropositionalEquality hiding ([_])

open import SyntaxObject


module ex5 where
  
  -- –í –ø—è—Ç–Ω–∏—Ü—É –ú–∞—à–∞ –µ–ª–∞ –∫–∞—à—É.
  
  –≤-–ø—è—Ç–Ω–∏—Ü—É/li = mkLI (P ‚à∑ decl ‚à∑ []) []
  –ú–∞—à–∞/li      = mkLI (N ‚à∑ fem ‚à∑ [])     []
  –µ–ª–∞/li       = mkLI (V ‚à∑ past ‚à∑ [])            (N ‚à∑ [])
  –∫–∞—à—É/li      = mkLI (N ‚à∑ fem ‚à∑ ACC ‚à∑ [])     []
  v/fc = mkFC (v·∂† ‚à∑ [])        (V ‚à∑ N ‚à∑ [])
  T/fc = mkFC (T·∂† ‚à∑ past ‚à∑ []) (v·∂† ‚à∑ N ‚à∑ P ‚à∑ [])
  C/fc = mkFC (C·∂† ‚à∑ [])        (T·∂† ‚à∑ N ‚à∑ Wh:* ‚à∑ [])
  
  –≤-–ø—è—Ç–Ω–∏—Ü—É/e = lex –≤-–ø—è—Ç–Ω–∏—Ü—É/li ‚ä£
  
  –µ–ª–∞/e : Enum _
  –µ–ª–∞/e = lex –µ–ª–∞/li ‚à∑ –≤-–ø—è—Ç–Ω–∏—Ü—É/e
  
  v/e : Enum _
  v/e = fun v/fc ‚à∑ –µ–ª–∞/e
  
  –ú–∞—à–∞/e : Enum _
  –ú–∞—à–∞/e = lex –ú–∞—à–∞/li ‚à∑ v/e
  
  –∫–∞—à—É/e : Enum _
  –∫–∞—à—É/e = lex –∫–∞—à—É/li ‚à∑ –ú–∞—à–∞/e
  
  T/e : Enum _
  T/e = fun T/fc ‚à∑ –∫–∞—à—É/e
  
  C/e : Enum _
  C/e = fun C/fc ‚à∑ T/e
  
  –≤-–ø—è—Ç–Ω–∏—Ü—É = ‚ü¶ –≤-–ø—è—Ç–Ω–∏—Ü—É/e ‚ä£‚üß
  –ú–∞—à–∞      = ‚ü¶ –ú–∞—à–∞/e ‚ä£‚üß
  –µ–ª–∞       = ‚ü¶ –µ–ª–∞/e ‚ä£‚üß
  –∫–∞—à—É      = ‚ü¶ –∫–∞—à—É/e ‚ä£‚üß
  ùë£ = ‚ü¶ v/e ‚ä£‚üß
  T = ‚ü¶ T/e ‚ä£‚üß
  C = ‚ü¶ C/e ‚ä£‚üß
  
  st = Merge (# 0) (# 1) &
       Select C/e &
       Merge (# 0) (# 1) &
       Select –≤-–ø—è—Ç–Ω–∏—Ü—É/e &
       Merge (# 0) (# 1) &
       Select –ú–∞—à–∞/e &
       Merge (# 0) (# 1) &
       Select T/e &
       Merge (# 0) (# 1) &
       Select v/e &
       Merge (# 0) (# 1) &
       Select –µ–ª–∞/e &
       Select –∫–∞—à—É/e &
       ‚àÖ
  
  
  _ : st [ # 12 ] ‚â° –∫–∞—à—É
  _ = refl
  
  _ : st [ # 10 ] ‚â° ‚ü¶ V ‚à∑ past ‚à∑ [] ‚àô [] -
                       –µ–ª–∞ -
                       –∫–∞—à—É
                    ‚üß 
  _ = refl
  
  _ : st [ # 8 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ [] -
                       ùë£ -
                       ‚ü¶ V ‚à∑ past ‚à∑ [] ‚àô []  -
                           –µ–ª–∞ -
                           –∫–∞—à—É
                       ‚üß
                   ‚üß 
  _ = refl
  
  -- _ : st [ # 7 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô []  -
  --                      —Ç—ã -
  --                      ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
  --                          ùë£ -
  --                          ‚ü¶  V ‚à∑ [] ‚àô []  -
  --                              –∫—É–ø–∏–ª -
  --                              –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É
  --                          ‚üß
  --                      ‚üß
  --                  ‚üß 
  -- _ = refl
  
  -- _ : st [ # 3 ] ‚â° ‚ü¶ T·∂† ‚à∑ past ‚à∑ [] ‚àô N ‚à∑ []  -
  --                      T -
  --                      ‚ü¶ v·∂† ‚à∑ [] ‚àô []  -
  --                          —Ç—ã -
  --                          ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
  --                              ùë£ -
  --                              ‚ü¶ V ‚à∑ [] ‚àô []  -
  --                                  –∫—É–ø–∏–ª -
  --                                  –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É
  --                              ‚üß
  --                          ‚üß
  --                      ‚üß
  --                 ‚üß
  -- _ = refl
  
  -- _ : st [ # 2 ] ‚â° ‚ü¶ T·∂† ‚à∑ past ‚à∑ [] ‚àô [] -
  --                      —Ç—ã -
  --                      st [ # 3 ]
  --                  ‚üß 
  -- _ = refl
  
  -- _ : st [ # 0 ] ‚â° ‚ü¶ C·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
  --                      C -
  --                      st [ # 2 ]
  --                  ‚üß 
  -- _ = refl
  
  -- _ : st [ # 0 ] ‚â° ‚ü¶ C·∂† ‚à∑ [] ‚àô [] -
  --                      —á—Ç–æ -
  --                      ‚ü¶ C·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
  --                          C -
  --                          ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô [] -
  --                              –ú–∏—à–∞ -
  --                              ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô N ‚à∑ [] -
  --                                  T -
  --                                  ‚ü¶ v·∂† ‚à∑ [] ‚àô [] -
  --                                      –ú–∏—à–∞ -
  --                                      ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ [] -
  --                                          ùë£ -
  --                                          ‚ü¶ V ‚à∑ [] ‚àô [] -
  --                                              –µ—Å—Ç—å -
  --                                              —á—Ç–æ        ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß
  -- _ = refl
  
  


--========================================================================

module ex4 where

  -- –ö–∞–∫—É—é –º–∞—à–∏–Ω—É —Ç—ã –∫—É–ø–∏–ª?  –ú–°–†, 146 –∏ —Å–ª..
  
  –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É/li  = mkLI (N ‚à∑ question ‚à∑ []) []
  —Ç—ã/li            = mkLI (N ‚à∑ masc ‚à∑ [])     []
  –∫—É–ø–∏–ª/li         = mkLI (V ‚à∑ [])            (N ‚à∑ [])
  v/fc = mkFC (v·∂† ‚à∑ [])        (V ‚à∑ N ‚à∑ [])
  T/fc = mkFC (T·∂† ‚à∑ past ‚à∑ []) (v·∂† ‚à∑ N ‚à∑ [])
  C/fc = mkFC (C·∂† ‚à∑ [])        (T·∂† ‚à∑ N ‚à∑ Wh:* ‚à∑ [])
  
  –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É/e = lex –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É/li ‚ä£
  
  –∫—É–ø–∏–ª/e : Enum _
  –∫—É–ø–∏–ª/e = lex –∫—É–ø–∏–ª/li ‚à∑ –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É/e
  
  v/e : Enum _
  v/e = fun v/fc ‚à∑ –∫—É–ø–∏–ª/e
  
  —Ç—ã/e : Enum _
  —Ç—ã/e = lex —Ç—ã/li ‚à∑ v/e
  
  T/e : Enum _
  T/e = fun T/fc ‚à∑ —Ç—ã/e
  
  C/e : Enum _
  C/e = fun C/fc ‚à∑ T/e
  
  –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É  = ‚ü¶ –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É/e ‚ä£‚üß
  –∫—É–ø–∏–ª         = ‚ü¶ –∫—É–ø–∏–ª/e ‚ä£‚üß
  —Ç—ã            = ‚ü¶ —Ç—ã/e ‚ä£‚üß
  ùë£ = ‚ü¶ v/e ‚ä£‚üß
  T = ‚ü¶ T/e ‚ä£‚üß
  C = ‚ü¶ C/e ‚ä£‚üß
  
  st = Merge (# 0) (# 1) &
       Select C/e &
       Merge (# 3) (# 0) &
       Merge (# 0) (# 1) &
       Select T/e &
       Merge (# 0) (# 1) &
       Select —Ç—ã/e &
       Merge (# 0) (# 1) &
       Select v/e &
       Merge (# 0) (# 1) &
       Select –∫—É–ø–∏–ª/e &
       Select –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É/e &
       ‚àÖ
  
  
  _ : st [ # 11 ] ‚â° –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É 
  _ = refl
  
  _ : st [ # 9 ] ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] -
                       –∫—É–ø–∏–ª -
                       –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É
                   ‚üß 
  _ = refl
  
  _ : st [ # 7 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ [] -
                       ùë£ -
                       ‚ü¶ V ‚à∑ [] ‚àô []  -
                           –∫—É–ø–∏–ª -
                           –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É
                       ‚üß
                   ‚üß 
  _ = refl
  
  _ : st [ # 5 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô []  -
                       —Ç—ã -
                       ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
                           ùë£ -
                           ‚ü¶  V ‚à∑ [] ‚àô []  -
                               –∫—É–ø–∏–ª -
                               –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É
                           ‚üß
                       ‚üß
                   ‚üß 
  _ = refl
  
  _ : st [ # 3 ] ‚â° ‚ü¶ T·∂† ‚à∑ past ‚à∑ [] ‚àô N ‚à∑ []  -
                       T -
                       ‚ü¶ v·∂† ‚à∑ [] ‚àô []  -
                           —Ç—ã -
                           ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
                               ùë£ -
                               ‚ü¶ V ‚à∑ [] ‚àô []  -
                                   –∫—É–ø–∏–ª -
                                   –∫–∞–∫—É—é-–º–∞—à–∏–Ω—É
                               ‚üß
                           ‚üß
                       ‚üß
                  ‚üß
  _ = refl
  
  _ : st [ # 2 ] ‚â° ‚ü¶ T·∂† ‚à∑ past ‚à∑ [] ‚àô [] -
                       —Ç—ã -
                       st [ # 3 ]
                   ‚üß 
  _ = refl
  
  -- _ : st [ # 0 ] ‚â° ‚ü¶ C·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
  --                      C -
  --                      st [ # 2 ]
  --                  ‚üß 
  -- _ = refl
  
  -- _ : st [ # 0 ] ‚â° ‚ü¶ C·∂† ‚à∑ [] ‚àô [] -
  --                      —á—Ç–æ -
  --                      ‚ü¶ C·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
  --                          C -
  --                          ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô [] -
  --                              –ú–∏—à–∞ -
  --                              ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô N ‚à∑ [] -
  --                                  T -
  --                                  ‚ü¶ v·∂† ‚à∑ [] ‚àô [] -
  --                                      –ú–∏—à–∞ -
  --                                      ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ [] -
  --                                          ùë£ -
  --                                          ‚ü¶ V ‚à∑ [] ‚àô [] -
  --                                              –µ—Å—Ç—å -
  --                                              —á—Ç–æ        ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß
  -- _ = refl
  
  

--========================================================================

module ex3 where

  
  -- –ß—Ç–æ –ú–∏—à–∞ –±—É–¥–µ—Ç –µ—Å—Ç—å?  –ú–°–†, 137.
  
  —á—Ç–æ/li  = mkLI (N ‚à∑ [])        []
  –ú–∏—à–∞/li = mkLI (N ‚à∑ masc ‚à∑ []) []
  –µ—Å—Ç—å/li = mkLI (V ‚à∑ [])        (N ‚à∑ [])
  v/fc = mkFC (v·∂† ‚à∑ [])          (V ‚à∑ N ‚à∑ [])
  T/fc = mkFC (T·∂† ‚à∑ future ‚à∑ []) (v·∂† ‚à∑ N ‚à∑ [])
  C/fc = mkFC (C·∂† ‚à∑ [])          (T·∂† ‚à∑ N ‚à∑ [])
  
  —á—Ç–æ/e = lex —á—Ç–æ/li ‚ä£
  
  –µ—Å—Ç—å/e : Enum _
  –µ—Å—Ç—å/e = lex –µ—Å—Ç—å/li ‚à∑ —á—Ç–æ/e
  
  v/e : Enum _
  v/e = fun v/fc ‚à∑ –µ—Å—Ç—å/e
  
  –ú–∏—à–∞/e : Enum _
  –ú–∏—à–∞/e = lex –ú–∏—à–∞/li ‚à∑ v/e
  
  T/e : Enum _
  T/e = fun T/fc ‚à∑ –ú–∏—à–∞/e
  
  C/e : Enum _
  C/e = fun C/fc ‚à∑ T/e
  
  —á—Ç–æ  = ‚ü¶ —á—Ç–æ/e ‚ä£‚üß
  –µ—Å—Ç—å = ‚ü¶ –µ—Å—Ç—å/e ‚ä£‚üß
  –ú–∏—à–∞ = ‚ü¶ –ú–∏—à–∞/e ‚ä£‚üß
  ùë£ = ‚ü¶ v/e ‚ä£‚üß
  T = ‚ü¶ T/e ‚ä£‚üß
  C = ‚ü¶ C/e ‚ä£‚üß
  
  st = Merge (# 11) (# 0) &
       Merge (# 0) (# 1) &
       Select C/e &
       Merge (# 3) (# 0) &
       Merge (# 0) (# 1) &
       Select T/e &
       Merge (# 0) (# 1) &
       Select –ú–∏—à–∞/e &
       Merge (# 0) (# 1) &
       Select v/e &
       Merge (# 0) (# 1) &
       Select –µ—Å—Ç—å/e &
       Select —á—Ç–æ/e &
       ‚àÖ
  
  
  _ : st [ # 12 ] ‚â° —á—Ç–æ 
  _ = refl
  
  _ : st [ # 10 ] ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] -
                       –µ—Å—Ç—å -
                       —á—Ç–æ
                   ‚üß 
  _ = refl
  
  _ : st [ # 8 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ [] -
                       ùë£ -
                       ‚ü¶ V ‚à∑ [] ‚àô []  -
                           –µ—Å—Ç—å -
                           —á—Ç–æ
                       ‚üß
                   ‚üß 
  _ = refl
  
  _ : st [ # 6 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô []  -
                       –ú–∏—à–∞ -
                       ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
                           ùë£ -
                           ‚ü¶  V ‚à∑ [] ‚àô []  -
                               –µ—Å—Ç—å -
                               —á—Ç–æ
                           ‚üß
                       ‚üß
                   ‚üß 
  _ = refl
  
  _ : st [ # 4 ] ‚â° ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô N ‚à∑ []  -
                       T -
                       ‚ü¶ v·∂† ‚à∑ [] ‚àô []  -
                           –ú–∏—à–∞ -
                           ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
                               ùë£ -
                               ‚ü¶ V ‚à∑ [] ‚àô []  -
                                   –µ—Å—Ç—å -
                                   —á—Ç–æ
                               ‚üß
                           ‚üß
                       ‚üß
                  ‚üß
  _ = refl
  
  _ : st [ # 3 ] ‚â° ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô [] -
                       –ú–∏—à–∞ -
                       st [ # 4 ]
                   ‚üß 
  _ = refl
  
  _ : st [ # 1 ] ‚â° ‚ü¶ C·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
                       C -
                       st [ # 3 ]
                   ‚üß 
  _ = refl
  
  _ : st [ # 0 ] ‚â° ‚ü¶ C·∂† ‚à∑ [] ‚àô [] -
                       —á—Ç–æ -
                       ‚ü¶ C·∂† ‚à∑ [] ‚àô N ‚à∑ []  -
                           C -
                           ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô [] -
                               –ú–∏—à–∞ -
                               ‚ü¶ T·∂† ‚à∑ future ‚à∑ [] ‚àô N ‚à∑ [] -
                                   T -
                                   ‚ü¶ v·∂† ‚à∑ [] ‚àô [] -
                                       –ú–∏—à–∞ -
                                       ‚ü¶ v·∂† ‚à∑ [] ‚àô N ‚à∑ [] -
                                           ùë£ -
                                           ‚ü¶ V ‚à∑ [] ‚àô [] -
                                               –µ—Å—Ç—å -
                                               —á—Ç–æ        ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß ‚üß
  _ = refl
  
  
  
module ex2 where

  -- —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
  
  —Å—Ç—Ä–∞—É—Å/li  = mkLI (N ‚à∑ masc ‚à∑ singular ‚à∑ []) (Number: ‚à∑ [])
  —Å—Ç—Ä–∞—É—Å—ã/li = mkLI (N ‚à∑ masc ‚à∑ plural ‚à∑ []) []
  -- —Å–ø–∞—Ç—å/li    = mkLI (V ‚à∑ []) (N ‚à∑ Number: ‚à∑ [])
  —Å–ø–∏—Ç/li    = mkLI (V ‚à∑ singular ‚à∑ []) (N ‚à∑ [])
  —Å–ø—è—Ç/li    = mkLI (V ‚à∑ plural ‚à∑ []) (N ‚à∑ [])
  
  —Å—Ç—Ä–∞—É—Å/e = lex —Å—Ç—Ä–∞—É—Å/li ‚ä£
  —Å—Ç—Ä–∞—É—Å—ã/e : Enum _
  —Å—Ç—Ä–∞—É—Å—ã/e = lex —Å—Ç—Ä–∞—É—Å—ã/li ‚à∑ —Å—Ç—Ä–∞—É—Å/e
  -- —Å–ø–∞—Ç—å/e : Enum _
  -- —Å–ø–∞—Ç—å/e  = lex —Å–ø–∞—Ç—å/li ‚à∑ —Å—Ç—Ä–∞—É—Å—ã/e
  —Å–ø–∏—Ç/e : Enum _
  —Å–ø–∏—Ç/e  = lex —Å–ø–∏—Ç/li ‚à∑ —Å—Ç—Ä–∞—É—Å—ã/e
  —Å–ø—è—Ç/e : Enum _
  —Å–ø—è—Ç/e  = lex —Å–ø—è—Ç/li ‚à∑ —Å—Ç—Ä–∞—É—Å—ã/e


  -- —Å—Ç—Ä–∞—É—Å —Å–ø–∏—Ç
  
  st1 = Merge (# 0) (# 1) &
        Select —Å–ø–∏—Ç/e &
        Select —Å—Ç—Ä–∞—É—Å/e &
        ‚àÖ
  
  -- —Å—Ç—Ä–∞—É—Å—ã —Å–ø—è—Ç
  
  st2 = Merge (# 0) (# 1) &
        Select —Å–ø—è—Ç/e &
        Select —Å—Ç—Ä–∞—É—Å—ã/e &
        ‚àÖ
  
  -- –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è  ???
  
  st3 = Merge (# 0) (# 1) &
        Select —Å–ø—è—Ç/e &
        Select —Å—Ç—Ä–∞—É—Å/e &
        ‚àÖ
  
  st4 = Merge (# 0) (# 1) &
        Select —Å–ø–∏—Ç/e &
        Select —Å—Ç—Ä–∞—É—Å—ã/e &
        ‚àÖ
  


--========================================================================

module ex1 where

  -- –≤ uF –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ -- –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç, –≤—Ç–æ—Ä–æ–µ -- —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  run/li  = mkLI (V ‚à∑ []) (N ‚à∑ [])
  love/li = mkLI (V ‚à∑ []) (N ‚à∑ N ‚à∑ [])
  give/li = mkLI (V ‚à∑ []) (N ‚à∑ N ‚à∑ P ‚à∑ [])
  man/li  = mkLI (N ‚à∑ []) []
  to/li   = mkLI (P ‚à∑ []) (N ‚à∑ [])
  John/li = mkLI (N ‚à∑ []) []
  Mary/li = mkLI (N ‚à∑ []) []
  
  v/fc = mkFC (v·∂† ‚à∑ []) (V ‚à∑ [])  -- ??

  v/e : Enum 1
  v/e = fun v/fc ‚ä£
  run/e : Enum 2
  run/e = lex run/li ‚à∑ v/e
  John/e : Enum 3
  John/e = lex John/li ‚à∑ run/e
  
  John = ‚ü¶ John/e ‚ä£‚üß
  run  = ‚ü¶ run/e  ‚ä£‚üß
  v    = ‚ü¶ v/e    ‚ä£‚üß
  
  st0 = Select run/e & Select John/e & ‚àÖ 
  st1 = Merge (# 0) (# 1) & st0
  st2 = Merge (# 0) (# 1) & Select v/e & st1  
  
  _ : st2 ‚â° Merge (# 0) (# 1) &
            Select v/e &
            Merge (# 0) (# 1) &
            Select run/e &
            Select John/e &
            ‚àÖ
  _ = refl
  
  
  _ : st0 [ # 0 ] ‚â° run
  _ = refl
  
  _ : st0 [ # 1 ] ‚â° John
  _ = refl
  
  _ : st1 [ # 0 ] ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] - run - John ‚üß
  _ = refl
  
  _ : st1 [ # 1 ] ‚â° run 
  _ = refl
  
  _ : st2 [ # 0 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô [] 
                      - v 
                      - ‚ü¶ V ‚à∑ [] ‚àô [] 
                          - run 
                          - John ‚üß ‚üß  
  _ = refl
  
  _ : st2 [ # 1 ] ‚â° v
  _ = refl
  
  _ : st2 [ # 2 ] ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] - run - John ‚üß
  _ = refl
  
  _ : st2 [ # 3 ] ‚â° run 
  _ = refl
  
  fast/li = mkLI (Adj ‚à∑ []) []
  fast/e : Enum _
  fast/e = lex fast/li ‚à∑ run/e
  fast = ‚ü¶ fast/e ‚ä£‚üß
  
  st3 = Adjoin (# 0) (# 1) &
        Select fast/e &
        st2
  
  st4 = Adjoin (# 0) (# 1) &
        Select fast/e &
        Merge (# 0) (# 1) &
        Select v/e &
        Merge (# 0) (# 1) &
        Select run/e &
        Select John/e &
        ‚àÖ
  
  _ : st3 ‚â° st4
  _ = refl
  
  
  
  -- ‚ãò_‚àô_‚ãô : FList ‚Üí FList ‚Üí Maybe Label
  -- ‚ãò ‚ãô ‚ãê ‚ãë ‚Äø ‚ãØ ‚Äî  ‚åü‚åû ~~ ‚ï¥‚ïµ‚ï∂‚ï∑ ‚ãÜ ‚óÇ‚ñ∏ ‚óÉ‚ñπ 
  -- „Äê_-_-_„Äë  ‚ÅÖ ‚ÅÜ [[_-_-_]]
  
  
  _ : st4 [ # 0 ] ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô [] -
                        fast -
                        ‚ü¶ v·∂† ‚à∑ [] ‚àô [] -
                            v -
                            ‚ü¶ V ‚à∑ [] ‚àô [] -
                                run -
                                John
                            ‚üß
                        ‚üß
                     ‚üß
  _ = refl
  
  
  Mary/e : Enum _
  Mary/e = lex Mary/li ‚à∑ run/e
  Mary = ‚ü¶ Mary/e ‚ä£‚üß

  run‚ÇÇ/e : Enum _
  run‚ÇÇ/e = lex run/li ‚à∑ Mary/e
  run‚ÇÇ = ‚ü¶ run‚ÇÇ/e ‚ä£‚üß
  
  -- Mary runs
  st5 = Merge (# 1) (# 0) &
        Select run‚ÇÇ/e &
        Select Mary/e &
        st2
  
  
  _ : st5 [ # 0 ] ‚â° ‚ü¶ V ‚à∑ [] ‚àô []  -
                      Mary -
                      run‚ÇÇ ‚üß
  _ = refl
  
  
  love/e : Enum _
  love/e = lex love/li ‚à∑ run‚ÇÇ/e
  love = ‚ü¶ love/e ‚ä£‚üß
  
  -- John loves Mary
  st6 = Merge (# 9) (# 0) &
        Merge (# 0) (# 3) &
        Select love/e &
        st5 
  
  _ : st6 [ # 10 ] ‚â° John
  _ = refl
  
  
  _ : st6 [ # 0 ] ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] -
                      John -
                      ‚ü¶ V ‚à∑ [] ‚àô N ‚à∑ [] -
                        love -
                        Mary ‚üß ‚üß
  _ = refl
  
  
  st7 = Adjoin (# 0) (# 1) &
        Select John/e &
        Select fast/e &
        ‚àÖ



  --==  Constituents  ==--
  
  _ : Constituents st1 (# 0) ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] - run - John ‚üß ‚à∑
                               run ‚à∑
                               John ‚à∑
                               []
  _ = refl                             
  
  _ : Constituents st2 (# 0) ‚â° ‚ü¶ v·∂† ‚à∑ [] ‚àô []
                                 - v
                                 - ‚ü¶ V ‚à∑ [] ‚àô []
                                     - run
                                     - John ‚üß ‚üß ‚à∑  
                               v ‚à∑
                               ‚ü¶ V ‚à∑ [] ‚àô [] - run - John ‚üß ‚à∑
                               run ‚à∑
                               John ‚à∑
                               []
  _ = refl
  
  _ : Constituents st2 (# 1) ‚â° v ‚à∑ []
  _ = refl
  
  _ : Constituents st2 (# 2) ‚â° ‚ü¶ V ‚à∑ [] ‚àô [] - run - John ‚üß ‚à∑
                               run ‚à∑
                               John ‚à∑
                               []
  _ = refl
  


  --==   Path  ==--

  
  _ : path-exists? st0 (# 0) ‚â° true
  _ = refl
  
  _ : path-exists? st0 (# 1) ‚â° false
  _ = refl
  
  _ : path-exists? st1 (# 0) ‚â° true
  _ = refl
  
  _ : path-exists? st1 (# 1) ‚â° true
  _ = refl
  
  _ : path-exists? st1 (# 2) ‚â° true
  _ = refl
  
  _ : path-exists? st2 (# 0) ‚â° true
  _ = refl
  
  _ : path-exists? st2 (# 1) ‚â° true
  _ = refl
  
  _ : path-exists? st2 (# 2) ‚â° true
  _ = refl
  
  _ : path-exists? st2 (# 3) ‚â° true
  _ = refl
  
  _ : path-exists? st2 (# 4) ‚â° true
  _ = refl
  
  _ : path-exists? (rest st2 (# 1)) (# 0) ‚â° true
  _ = refl
  
  _ : path-exists? (rest st2 (# 1)) (# 1) ‚â° false
  _ = refl
  
  _ : path-exists? (rest st2 (# 1)) (# 2) ‚â° false
  _ = refl
  
  _ : path-exists? (rest st2 (# 2)) (# 0) ‚â° true
  _ = refl
  
  _ : path-exists? (rest st2 (# 2)) (# 1) ‚â° true
  _ = refl
  
  _ : path-exists? (rest st2 (# 2)) (# 2) ‚â° true
  _ = refl
  
  
